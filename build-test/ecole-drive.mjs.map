{
  "version": 3,
  "sources": ["../src/ecole-drive.mts", "../src/metadata.mts", "../src/util.mts", "../src/ecole-drive-manager.mts"],
  "sourcesContent": ["import path, { basename } from 'path';\nimport { authenticate } from '@google-cloud/local-auth';\nimport { google, Auth } from 'googleapis';\nimport { CachedFile, Token, createMetadataManager } from './metadata.mjs';\nimport { findPackageJsonDirectory } from './util.mjs';\nimport { fileURLToPath } from 'node:url';\nimport { createEcoleDriveManager } from './ecole-drive-manager.mjs';\n\n\n// If modifying these scopes, delete token.json.\nconst SCOPES = [\n    // 'https://www.googleapis.com/auth/drive.metadata.readonly',\n    'https://www.googleapis.com/auth/drive',\n    'https://www.googleapis.com/auth/drive.appdata',\n    'https://www.googleapis.com/auth/drive.file',\n    'https://www.googleapis.com/auth/drive.metadata',\n    'https://www.googleapis.com/auth/drive.scripts',\n];\n\n// The file token.json stores the user's access and refresh tokens, and is\n// created automatically when the authorization flow completes for the first\n// time.\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nconst packageJsonDir = await findPackageJsonDirectory(__dirname);\n\nconst metadataManager = createMetadataManager({\n    token: path.join(packageJsonDir, 'metadata/token.json'),\n    credentials: path.join(packageJsonDir, 'metadata/credentials.json'),\n    cachedFiles: path.join(packageJsonDir, 'metadata/files.json')\n});\n\nconst metadata = await metadataManager.load();\n\n\n\n// Reads previously authorized credentials from the save file.\nconst loadSavedCredentialsIfExist = async (): Promise<Auth.OAuth2Client | null> => {\n    try {\n        return google.auth.fromJSON((metadata.credentials.installed || metadata.credentials.web)!) as Auth.OAuth2Client;\n    } catch (err) {\n        return null;\n    }\n};\n\n/**\n * Serializes credentials to a file comptible with GoogleAUth.fromJSON.\n */\nconst saveCredentials = async (client: Auth.OAuth2Client): Promise<void> => {\n    const credential = (metadata.credentials.installed || metadata.credentials.web)!;\n\n    const token: Token = {\n        type: 'authorized_user',\n        client_id: credential.client_id,\n        client_secret: credential.client_secret,\n        refresh_token: client.credentials.refresh_token,\n    };\n\n    await metadataManager.save('token', token);\n};\n\n/**\n * Load or request or authorization to call APIs.\n *\n */\nasync function authorize() {\n    let client = await loadSavedCredentialsIfExist();\n\n    if (client)\n        return client;\n\n    client = await authenticate({\n        scopes: SCOPES,\n        keyfilePath: metadataManager.metadataFiles.credentials,\n    });\n\n    if (client.credentials) {\n        await saveCredentials(client);\n    }\n    return client;\n}\n\n\n// test if it is working\n// authorize().then(listFiles).catch(console.error);\n\n\nconst authClient = await authorize();\n\nconst ecoleDrive = createEcoleDriveManager(authClient, metadata);\n\nconst uploadFileInEcole = async (filePath: string) => {\n    const fileId = await ecoleDrive.uploadFile(filePath);\n\n    if (fileId) {\n        const cachedFile: CachedFile = {\n            googleDriveFileId: fileId,\n            localPath: filePath,\n            name: basename(filePath)\n        };\n\n        metadata.cachedFiles = [ ...metadata.cachedFiles, cachedFile ];\n        await metadataManager.save('cachedFiles', metadata.cachedFiles);\n    }\n};\n\nconsole.log(await uploadFileInEcole('./test.txt'));\n", "import fs from 'fs-extra';\n\n\nexport type Token = {\n    type: string;\n    client_id: string;\n    client_secret: string;\n    refresh_token?: string | null | undefined;\n};\n\nexport type Credential = {\n    client_id: string;\n    project_id: string;\n    auth_uri: string;\n    token_uri: string;\n    auth_provider_x509_cert_url: string;\n    client_secret: string;\n    redirect_uris: string[];\n};\n\nexport type Credentials = {\n    installed?: Credential;\n    web?: Credential;\n};\n\nexport type CachedFile = {\n    name: string;\n    localPath: string;\n    googleDriveFileId: string;\n};\n\nexport type CachedFiles = CachedFile[];\n\n\nexport type Metadata<T = Token, C = Credentials, F = CachedFiles> = {\n    token: T;\n    credentials: C;\n    cachedFiles: F;\n};\n\nconst metadataInit: Partial<Metadata> = {\n    cachedFiles: []\n};\n\nexport const createMetadataManager = (metadataFiles: Metadata<string, string, string>) => {\n    const load = async (): Promise<Metadata> => {\n\n        const datas = await Promise.all(Object.entries(metadataFiles).map(async ([ name, filePath ]) => {\n            await fs.ensureFile(filePath);\n\n            const data = (await fs.readFile(filePath, 'utf-8')) || metadataInit[ name ];\n\n            if (!data)\n                return [ name, undefined ];\n\n            return [ name, JSON.parse(data) ];\n        }));\n\n        return Object.fromEntries(datas);\n    };\n\n\n    const save = async <N extends keyof Metadata>(metadataName: N, data: Metadata[ N ]) => {\n        return fs.writeFile(metadataFiles[ metadataName ], JSON.stringify(data), 'utf-8');\n    };\n\n    return {\n        load,\n        save,\n        metadataFiles\n    };\n};\n", "\nimport fs from 'fs-extra';\nimport path from 'path';\n\nexport const findUpDirectory = async (dir: string, condition: (currentDir: string) => Promise<boolean>): Promise<string> => {\n    const isRoot = (filepath: string) => path.dirname(filepath) === filepath;\n\n    const findUp = async (currentDir: string) => {\n\n        if (await condition(currentDir))\n            return currentDir;\n\n        if (isRoot(currentDir))\n            throw new Error(`Could not find the directory complying with the condition starting from directory \"${dir}\" going up to the system root.`);\n\n        return findUp(path.resolve(currentDir, '..'));\n    };\n\n    return findUp(dir);\n};\n\n\nexport const fileExists = async (filepath: string, options: { type?: 'file' | 'directory'; } = {}): Promise<boolean> => {\n    try {\n        const stats = (await fs.stat(filepath));\n\n        if (options.type === 'directory')\n            return stats.isDirectory();\n\n        if (options.type === 'file')\n            return stats.isFile();\n\n        return true;\n    } catch {\n        return false;\n    }\n};\n\nexport const findPackageJsonDirectory = (dir: string) => findUpDirectory(\n    dir,\n    async d => await fileExists(path.join(d, 'package.json'), { type: 'file' })\n);\n", "\nimport { createReadStream as createFsReadStream } from 'node:fs';\nimport path from 'path';\nimport { google, Auth, drive_v3 } from 'googleapis';\nimport { Metadata } from './metadata.mjs';\n\nexport const createEcoleDriveManager = (authClient: Auth.OAuth2Client, metadata: Pick<Metadata, 'cachedFiles'>) => {\n    // Acquire an auth client, and bind it to all future calls\n    //  google.options({ auth: authClient });\n    const drive = google.drive({ version: 'v3', auth: authClient });\n\n    const ecoleFolderId = '1L2gGi_UpwT9_gDJpLyLq0prY3cAcLThO';\n    const inEcoleQuery = `\"${ecoleFolderId}\" in parents`;\n\n    // const ecoleFolder = await drive.files.get({ fileId: ecoleFolderId });\n\n    /**\n     * Lists the names and IDs of up to 10 files.\n     */\n    const getFiles = async (pageSize: number = 100): Promise<Pick<drive_v3.Schema$File, 'id' | 'name'>[]> => {\n\n        const getFiles = async (files: drive_v3.Schema$File[] = []) => {\n\n            const res = await drive.files.list({\n                q: inEcoleQuery, // filter out the Ecole folder\n                pageSize,\n                fields: 'nextPageToken, files(id, name)',\n            });\n\n            const { files: newFiles = [], nextPageToken } = res.data;\n\n            const allFiles = [ ...files, ...newFiles ];\n\n            if (!nextPageToken)\n                return allFiles;\n\n            return getFiles(allFiles);\n        };\n\n        return getFiles();\n    };\n\n\n    const searchFile = async (fileName: string): Promise<Pick<drive_v3.Schema$File, 'id' | 'name'> | undefined> => {\n        try {\n            const res = await drive.files.list({\n                q: `${inEcoleQuery} and name = \"${fileName}\"`, // filter out the Ecole folder\n                fields: 'nextPageToken, files(id, name)',\n            });\n\n            return res.data.files?.[ 0 ];\n        } catch (e) {\n            if (e.code === 404)\n                return;\n\n            throw e;\n        }\n    };\n\n    /**\n     * Upload a file to the specified folder\n     */\n    const updateFile = async (fileName: string, fileId: string): Promise<Pick<drive_v3.Schema$File, 'id'>> => {\n        const file = await drive.files.update({\n            fileId,\n            media: {\n                body: createFsReadStream(fileName),\n                // auto\n                // mimeType: 'application/vnd.google-apps.file'\n                // https://developers.google.com/drive/api/guides/mime-types\n            },\n        });\n\n        return file.data;\n    };\n\n\n\n    const createFile = async (filePath: string): Promise<Pick<drive_v3.Schema$File, 'id'>> => {\n\n        const { data: file } = await drive.files.create({\n            // includePermissionsForView: '',\n            requestBody: {\n                name: path.basename(filePath),\n                parents: [ ecoleFolderId ]\n            },\n            media: {\n                body: createFsReadStream(filePath),\n                // mimeType: 'image/jpeg'\n            },\n            fields: 'id'\n        });\n\n        if (!file.id)\n            throw new Error(`Could not create file \"${filePath}\"`);\n\n        return file;\n    };\n\n    const createSharePermission = async (fileId: string): Promise<Pick<drive_v3.Schema$Permission, 'id'>> => {\n\n        const permission = await drive.permissions.create({\n            fileId,\n            requestBody: {\n                type: 'anyone',\n                role: 'reader'\n            },\n            fields: 'id'\n        });\n\n        if (!permission.data.id) {\n            throw new Error(`Could not create a shared permission for file \"${fileId}\"`);\n        }\n\n        return permission.data;\n    };\n\n    const createFileWithSharedPermission = async (filePath: string) => {\n        const file = await createFile(filePath);\n        const permission = await createSharePermission(file.id!);\n\n        return { file, permission };\n    };\n\n    const createSharePermissionForAllFiles = async (): Promise<Pick<drive_v3.Schema$Permission, 'id'>[]> => {\n        const files = await getFiles();\n\n        const permissions = await Promise.all(files.map(file => createSharePermission(file.id!)));\n        return permissions;\n    };\n\n    const uploadFile = async (filePath: string) => {\n        const fileName = path.basename(filePath);\n\n        const getFileId = async () => {\n            const cachedFile = metadata.cachedFiles.find(f => f.localPath === filePath || f.name === path.basename(filePath));\n\n            if (cachedFile)\n                return cachedFile.googleDriveFileId;\n\n            return (await searchFile(fileName))?.id;\n        };\n\n        const fileId = await getFileId();\n\n        if (fileId) {\n            await updateFile(fileName, fileId);\n            return fileId;\n        }\n\n        const newFile = await createFileWithSharedPermission(filePath);\n        return newFile.file.id;\n    };\n\n    return {\n        createFile,\n        updateFile,\n        searchFile,\n        getFiles,\n        uploadFile,\n        createSharePermission,\n        createFileWithSharedPermission,\n        createSharePermissionForAllFiles,\n    };\n};\n"],
  "mappings": "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",
  "names": ["path", "google", "fs", "path", "authClient", "metadata", "getFiles", "path", "google"]
}
