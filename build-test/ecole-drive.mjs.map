{
  "version": 3,
  "sources": ["../src/ecole-drive.mts"],
  "sourcesContent": ["import fs from 'node:fs/promises';\nimport { createReadStream as createFsReadStream } from 'node:fs';\nimport path from 'path';\nimport process from 'process';\nimport { authenticate } from '@google-cloud/local-auth';\nimport { google, Auth, drive_v3 } from 'googleapis';\n\n// type FileMetadata = {\n//     name?: string,\n//     mimeType?: string,\n//     parents?: string[];\n//     // etc\n// };\n\n// declare module 'googleapis' {\n//     namespace drive_v3 {\n//         export interface Params$Resource$Files$Create {\n//             resource?: FileMetadata;\n//         }\n\n//         export interface Params$Resource$Files$Update {\n//             resource?: FileMetadata;\n//         }\n//     }\n// }\n\n\n// If modifying these scopes, delete token.json.\nconst SCOPES = [\n    // 'https://www.googleapis.com/auth/drive.metadata.readonly',\n    'https://www.googleapis.com/auth/drive',\n    'https://www.googleapis.com/auth/drive.appdata',\n    'https://www.googleapis.com/auth/drive.file',\n    'https://www.googleapis.com/auth/drive.metadata',\n    'https://www.googleapis.com/auth/drive.scripts',\n];\n// The file token.json stores the user's access and refresh tokens, and is\n// created automatically when the authorization flow completes for the first\n// time.\nconst TOKEN_PATH = path.join(process.cwd(), 'token.json');\nconst CREDENTIALS_PATH = path.join(process.cwd(), 'credentials.json');\n\n/**\n * Reads previously authorized credentials from the save file.\n */\nconst loadSavedCredentialsIfExist = async (): Promise<Auth.OAuth2Client | null> => {\n    try {\n        const content = await fs.readFile(TOKEN_PATH, 'utf-8');\n        if (!content)\n            return null;\n\n        const credentials = JSON.parse(content);\n        return google.auth.fromJSON(credentials) as Auth.OAuth2Client;\n    } catch (err) {\n        return null;\n    }\n};\n\n/**\n * Serializes credentials to a file comptible with GoogleAUth.fromJSON.\n */\nconst saveCredentials = async (client: Auth.OAuth2Client): Promise<void> => {\n    const content = await fs.readFile(CREDENTIALS_PATH, 'utf-8');\n\n    const keys = JSON.parse(content);\n    const key = keys.installed || keys.web;\n\n    const payload = JSON.stringify({\n        type: 'authorized_user',\n        client_id: key.client_id,\n        client_secret: key.client_secret,\n        refresh_token: client.credentials.refresh_token,\n    });\n    await fs.writeFile(TOKEN_PATH, payload);\n};\n\n/**\n * Load or request or authorization to call APIs.\n *\n */\nasync function authorize() {\n    let client = await loadSavedCredentialsIfExist();\n\n    if (client)\n        return client;\n\n    client = await authenticate({\n        scopes: SCOPES,\n        keyfilePath: CREDENTIALS_PATH,\n    });\n\n    if (client.credentials) {\n        await saveCredentials(client);\n    }\n    return client;\n}\n\n\n// test if it is working\n// authorize().then(listFiles).catch(console.error);\n\nconst createEcoleDriveManager = (authClient: Auth.OAuth2Client) => {\n    // Acquire an auth client, and bind it to all future calls\n    //  google.options({ auth: authClient });\n    const drive = google.drive({ version: 'v3', auth: authClient });\n\n    const ecoleFolderId = '1L2gGi_UpwT9_gDJpLyLq0prY3cAcLThO';\n    const inEcoleQuery = `\"${ecoleFolderId}\" in parents`;\n\n    // const ecoleFolder = await drive.files.get({ fileId: ecoleFolderId });\n\n    /**\n     * Lists the names and IDs of up to 10 files.\n     */\n    const getFiles = async (pageSize: number = 100): Promise<Pick<drive_v3.Schema$File, 'id' | 'name'>[]> => {\n\n        const getFiles = async (files: drive_v3.Schema$File[] = []) => {\n\n            const res = await drive.files.list({\n                q: inEcoleQuery, // filter out the Ecole folder\n                pageSize,\n                fields: 'nextPageToken, files(id, name)',\n            });\n\n            const { files: newFiles = [], nextPageToken } = res.data;\n\n            const allFiles = [ ...files, ...newFiles ];\n\n            if (!nextPageToken)\n                return allFiles;\n\n            return getFiles(allFiles);\n        };\n\n        return getFiles();\n    };\n\n\n    const searchFile = async (fileName: string): Promise<Pick<drive_v3.Schema$File, 'id' | 'name'> | undefined> => {\n        try {\n            const res = await drive.files.list({\n                q: `${inEcoleQuery} and name = \"${fileName}\"`, // filter out the Ecole folder\n                fields: 'nextPageToken, files(id, name)',\n            });\n\n            return res.data.files?.[ 0 ];\n        } catch (e) {\n            if (e.code === 404)\n                return;\n\n            throw e;\n        }\n    };\n\n    /**\n     * Upload a file to the specified folder\n     */\n    const updateFile = async (fileName: string, fileId: string): Promise<Pick<drive_v3.Schema$File, 'id'>> => {\n        const file = await drive.files.update({\n            fileId,\n            media: {\n                body: createFsReadStream(fileName),\n                // auto\n                // mimeType: 'application/vnd.google-apps.file'\n                // https://developers.google.com/drive/api/guides/mime-types\n            },\n        });\n\n        return file.data;\n    };\n\n\n\n    const createFile = async (filePath: string): Promise<Pick<drive_v3.Schema$File, 'id'>> => {\n\n        const { data: file } = await drive.files.create({\n            // includePermissionsForView: '',\n            requestBody: {\n                name: path.basename(filePath),\n                parents: [ ecoleFolderId ]\n            },\n            media: {\n                body: createFsReadStream(filePath),\n                // mimeType: 'image/jpeg'\n            },\n            fields: 'id'\n        });\n\n        if (!file.id)\n            throw new Error(`Could not create file \"${filePath}\"`);\n\n        return file;\n    };\n\n    const createSharePermission = async (fileId: string): Promise<Pick<drive_v3.Schema$Permission, 'id'>> => {\n\n        const permission = await drive.permissions.create({\n            fileId,\n            requestBody: {\n                type: 'anyone',\n                role: 'reader'\n            },\n            fields: 'id'\n        });\n\n        if (!permission.data.id) {\n            throw new Error(`Could not create a shared permission for file \"${fileId}\"`);\n        }\n\n        return permission.data;\n    };\n\n    const createFileWithSharedPermission = async (filePath: string) => {\n        const file = await createFile(filePath);\n        const permission = await createSharePermission(file.id!);\n\n        return { file, permission };\n    };\n\n    const createSharePermissionForAllFiles = async (): Promise<Pick<drive_v3.Schema$Permission, 'id'>[]> => {\n        const files = await getFiles();\n\n        const permissions = await Promise.all(files.map(file => createSharePermission(file.id!)));\n        return permissions;\n    };\n\n    const uploadFile = async (filePath: string) => {\n        const fileName = path.basename(filePath);\n\n        const file = await searchFile(fileName);\n\n        if (file?.id) {\n            await updateFile(fileName, file.id);\n            return file.id;\n        }\n\n        const newFile = await createFileWithSharedPermission(filePath);\n        return newFile.file.id;\n    };\n\n    return {\n        createFile,\n        updateFile,\n        searchFile,\n        getFiles,\n        uploadFile,\n        createSharePermission,\n        createFileWithSharedPermission,\n        createSharePermissionForAllFiles,\n    };\n};\n\n\nconst authClient = await authorize();\n\nconst ecoleDrive = createEcoleDriveManager(authClient);\n\n\nconsole.log(await ecoleDrive.uploadFile('./test.txt'));\n"],
  "mappings": "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",
  "names": ["authClient", "getFiles"]
}
